startExpanded = FALSE,
menuSubItem(
text = "Products",
tabName = "tab3",
icon = icon("product-hunt")
),
menuSubItem(
text = "Promotion",
tabName = "tab4",
icon = icon("ad")
)
),
menuItem(
text = "Incomes",
tabName = "tab5",
icon = icon("money-bill-alt")
),
menuItem(
text = "Analysis",
tabName = "tab6",
icon = icon("chart-line")
)
)
),
controlbar = dashboardControlbar(
skin = "light",
sliderInput(
inputId = "controller",
label = "Update the first tabset",
min = 1,
max = 6,
value = 1
)
),
footer = bs4DashFooter()
),
server = function(input, output, session) {
observe(print(input$sidebarItemExpanded))
observe(print(input$sidebar))
# update tabset1
observeEvent(input$controller,
{
updateTabItems(
session,
inputId = "sidebar",
selected = paste0("tab", input$controller)
)
},
ignoreInit = TRUE
)
###Dasboard
output$totalCustomer <-renderText(nrow(data))
output$totalChildren <-renderText(sum(data$Kidhome,rm.na=TRUE))
output$totalTeen <-renderText(sum(data$Teenhome,rm.na=TRUE))
output$PurchaseWeb <-renderText(sum(data$NumWebPurchases,rm.na=TRUE))
output$PurchaseStore <-renderText(sum(data$NumStorePurchases,rm.na=TRUE))
output$NumComplain <- renderText(sum(data$Complain,rm.na=TRUE))
output$summary = renderPrint({
summary(data[, input$normchoice])
})
output$plot = renderPlot({
xx<-barplot(table(data[,input$normchoice]), col=sample(color, length(table(data[,input$normchoice]))),width = 0.85,xlab=input$normchoice )
text(x = xx, y = table(data[,input$normchoice]), label = table(data[,input$normchoice]), pos = 3, cex = 1, col = "black", xpd=TRUE)
})
output$boxplot = renderPlot({
boxplot(table(data[,input$normchoice]),col=sample(color,1))
})
output$pie = renderPlot({
pie3D(table(data[,input$normchoice]),labels = names(table(data[,input$normchoice])))
})
output$table = renderTable({
table(data[,input$normchoice])
})
###Data_Customers
output$data <- DT::renderDataTable(
if(input$education=="--All--"){
subset(data,Age>=input$t2Age)
}else{
subset(data[data$Education==input$education,],Age>=input$t2Age)
},
options = list(scrollX = TRUE),
rownames = TRUE
)
###Customer behavior
####-------------------------------------###
#Education
output$product_purchase_edu <- renderTable(
statistical_Edu_Purchases,
options = list(scrollX = TRUE)
)
output$plotByProductAndEdu <- renderPlot({
y<-apply(round(statistical_Edu_Purchases[,input$products]), 2, as.numeric)
xx<-barplot(apply(statistical_Edu_Purchases[,input$products], 2, as.numeric)~statistical_Edu_Purchases$Education,
col="#69b3a2",xlab="Education levels",ylab = input$products,
width=0.85, )
text(x = xx, y, label = y, pos = 3, cex = 1, col = "black", xpd=TRUE)
}
)
#Marital
output$product_purchase_marital <- renderTable(
statistical_Marital_Purchases,
options = list(scrollX = TRUE)
)
output$plotByProductAndMarital <- renderPlot({
y<-apply(round(statistical_Marital_Purchases[,input$products2]), 2, as.numeric)
xx<-barplot(apply(statistical_Marital_Purchases[,input$products2], 2, as.numeric)~statistical_Marital_Purchases$Marital_Status,
col="#69b3a2",xlab="Education levels",ylab = input$products2,
width=0.85, )
text(x = xx, y, label = y, pos = 3, cex = 1, col = "black", xpd=TRUE)
}
)
####-------------------------------------###
###Promotions
output$totalDeal <-renderText(
sum(data$NumDealsPurchases)
)
output$plotDeal <- renderPlot({
xx<- barplot(table(data$NumDealsPurchases),col=sample(color, length(table(data$NumDealsPurchases))) )
text(x = xx, y = table(data$NumDealsPurchases), label = table(data$NumDealsPurchases), pos = 3, cex = 1, col = "black", xpd=TRUE)
})
####Income
output$minIncome <- renderText(min(data$Income))
output$medianIncome <- renderText(mean(data$Income))
output$maxIncome <- renderText(max(data$Income))
output$boxplot_income <-renderPlot({
ggplot(data, aes(x=data[,input$normchoice_Income],y=Income,fill=data[,input$normchoice_Income]))+
ylim(0,180000)+geom_boxplot(outlier.colour="black", outlier.shape=16,outlier.size=2, notch=T)+xlab(input$normchoice_Income)+labs(fill = input$normchoice_Income)
})
output$density_income <-renderPlot(
qplot(round(Income), data = data, geom = "density",  color =data[,input$normchoice_Income],linetype = data[,input$normchoice_Income])
)
output$hist_income <-renderPlot(
qplot(Income, data = data, geom = "histogram", fill = data[,input$normchoice_Income])
+labs(fill = input$normchoice_Income)
)
####Anlysis
observeEvent(input$showhideSummary,{
toggle("summaryModelRegession")
}
)
observeEvent(input$showhideSummary2,{
toggle("summaryMultiLM")
}
)
#Linear Regession
output$summaryModelRegession <-renderPrint(
{
summary(lm(data$Total_Spent~data$Income))
}
)
output$plotLinearIncomeSpent <- renderPlot({
Sys.sleep(0.5) # system sleeping for 3 seconds for demo purpose
plot(data$Total_Spent~data$Income,xlab="Income",ylab="Total Spent")
abline(lm(data$Total_Spent~data$Income), col="red")
}
)
#Multiple Linear Regession
output$summaryMultiLM <- renderPrint({
Sys.sleep(0.5) # system sleeping for 3 seconds for demo purpose
summary(step(lm(Total_Spent~Income+accepted+NumDealsPurchases+Kidhome+Teenhome+Age,data=data)))
}
)
output$plotMultiLinearIncomeSpent <-renderPlot({
Sys.sleep(0.5) # system sleeping for 3 seconds for demo purpose
modelMulti<- step(lm(Total_Spent~Income+accepted+NumDealsPurchases+Kidhome+Teenhome+Age,data=data))
avPlots(modelMulti)
})
#Cluster
output$plotCluster <- renderPlot(
if(input$clusterchoice=="Cluster Plot"){
fviz_cluster(km.res, dfc, geom = "point",ellipse.type = "norm",repel = TRUE)
}else{
ggplot(dfc2, aes(x=cluster,y=dfc2[,input$clusterchoice],fill=cluster))+geom_boxplot(outlier.colour="black", outlier.shape=16,outlier.size=2, notch=T)+ylab(input$clusterchoice)
}
)
}
)
#########---Tab_1---###########
uiTab1 <-  fluidPage(
#Row1
fluidRow(
column(4,
box(
width = 12,
status = "primary",
title = "Total Customers",
textOutput("totalCustomer"),
collapsed = TRUE
)
),
column(4,
box(
width = 12,
title = "Total children in Home",
status = "danger",
textOutput("totalChildren"),
collapsed = TRUE
)
),
column(4,
box(
width = 12,
status = "success",
title = "Total Teen in Home",
textOutput("totalTeen"),
collapsed = TRUE
)
)
),
#Row2
fluidRow(
column(4,
box(
width = 12,
status = "indigo",
title = "Number of times customers shop at the website",
textOutput("PurchaseWeb"),
collapsed = TRUE
)
),
column(4,
box(
width = 12,
title = "Number of times customers shop at the store",
status = "pink",
textOutput("PurchaseStore"),
collapsed = TRUE
)
),
column(4,
box(
width = 12,
title = "Number of times customers complain",
status = "orange",
textOutput("NumComplain"),
collapsed = TRUE
)
)
),
#Row3
fluidRow(
status = "primary",
sidebarPanel(
radioButtons(
inputId="normchoice",
label="What do you want to check?",
choices = c("Education", "Marital_Status","Kidhome","Teenhome","Age"),
selected = "Education"
)
),
mainPanel(
box(
width = 12,
status = "orange",
solidHeader=TRUE,
tabsetPanel(
tabPanel("BarPlot", plotOutput("plot")),
tabPanel("Boxplot",plotOutput("boxplot")),
tabPanel("PieChart",plotOutput("pie")),
tabPanel("Summary", verbatimTextOutput("summary")),
tabPanel("Table", tableOutput("table"))
)
)
)
),
tags$style(HTML("
.tabbable > .nav {height:40px}
.tabbable > .nav > li > a {background-color: transparent;   color:#1E909E;padding:10px}
.tabbable > .nav > li> a[class=active] {background-color: #7D8C8C; color:white}
")),
)
#######---Main---##########
shinyApp(
ui = dashboardPage(
header = dashboardHeader(
title = dashboardBrand(
title = "Admin",
color = "primary",
image = "https://adminlte.io/themes/v3/dist/img/AdminLTELogo.png"
)
),
body = dashboardBody(
tabItems(
tabItem(
tabName = "tab1",
uiTab1
),
tabItem(
tabName = "tab2",
uiTab2
),
tabItem(
tabName = "tab3",
tabsetPanel(
tabPanel("Education",uiTab3),
tabPanel("Marital Status",uiTab3_2)
)
),
tabItem(
tabName = "tab4",
uiTab4
),
tabItem(
tabName = "tab5",
uiTab5
),
tabItem(
tabName = "tab6",
uiTab6
),
tabItem(
tabName = "tab7",
"Tab 7"
)
)
),
sidebar = dashboardSidebar(
skin = "light",
inputId = "sidebarState",
sidebarMenu(
id = "sidebar",
menuItem(
text = "Dashboard",
tabName = "tab1",
icon = icon("address-card"),
selected = TRUE
),
menuItem(
text = "Data Customers",
tabName = "tab2",
icon = icon("user")
),
menuItem(
text = "Consumer behaviour",
icon = icon("smile"),
startExpanded = FALSE,
menuSubItem(
text = "Products",
tabName = "tab3",
icon = icon("product-hunt")
),
menuSubItem(
text = "Promotion",
tabName = "tab4",
icon = icon("ad")
)
),
menuItem(
text = "Incomes",
tabName = "tab5",
icon = icon("money-bill-alt")
),
menuItem(
text = "Analysis",
tabName = "tab6",
icon = icon("chart-line")
)
)
),
controlbar = dashboardControlbar(
skin = "light",
sliderInput(
inputId = "controller",
label = "Update the first tabset",
min = 1,
max = 6,
value = 1
)
),
footer = bs4DashFooter()
),
server = function(input, output, session) {
observe(print(input$sidebarItemExpanded))
observe(print(input$sidebar))
# update tabset1
observeEvent(input$controller,
{
updateTabItems(
session,
inputId = "sidebar",
selected = paste0("tab", input$controller)
)
},
ignoreInit = TRUE
)
###Dasboard
output$totalCustomer <-renderText(nrow(data))
output$totalChildren <-renderText(sum(data$Kidhome,rm.na=TRUE))
output$totalTeen <-renderText(sum(data$Teenhome,rm.na=TRUE))
output$PurchaseWeb <-renderText(sum(data$NumWebPurchases,rm.na=TRUE))
output$PurchaseStore <-renderText(sum(data$NumStorePurchases,rm.na=TRUE))
output$NumComplain <- renderText(sum(data$Complain,rm.na=TRUE))
output$summary = renderPrint({
summary(data[, input$normchoice])
})
output$plot = renderPlot({
xx<-barplot(table(data[,input$normchoice]), col=sample(color, length(table(data[,input$normchoice]))),width = 0.85,xlab=input$normchoice )
text(x = xx, y = table(data[,input$normchoice]), label = table(data[,input$normchoice]), pos = 3, cex = 1, col = "black", xpd=TRUE)
})
output$boxplot = renderPlot({
boxplot(table(data[,input$normchoice]),col=sample(color,1))
})
output$pie = renderPlot({
pie3D(table(data[,input$normchoice]),labels = names(table(data[,input$normchoice])))
})
output$table = renderTable({
table(data[,input$normchoice])
})
###Data_Customers
output$data <- DT::renderDataTable(
if(input$education=="--All--"){
subset(data,Age>=input$t2Age)
}else{
subset(data[data$Education==input$education,],Age>=input$t2Age)
},
options = list(scrollX = TRUE),
rownames = TRUE
)
###Customer behavior
####-------------------------------------###
#Education
output$product_purchase_edu <- renderTable(
statistical_Edu_Purchases,
options = list(scrollX = TRUE)
)
output$plotByProductAndEdu <- renderPlot({
y<-apply(round(statistical_Edu_Purchases[,input$products]), 2, as.numeric)
xx<-barplot(apply(statistical_Edu_Purchases[,input$products], 2, as.numeric)~statistical_Edu_Purchases$Education,
col="#69b3a2",xlab="Education levels",ylab = input$products,
width=0.85, )
text(x = xx, y, label = y, pos = 3, cex = 1, col = "black", xpd=TRUE)
}
)
#Marital
output$product_purchase_marital <- renderTable(
statistical_Marital_Purchases,
options = list(scrollX = TRUE)
)
output$plotByProductAndMarital <- renderPlot({
y<-apply(round(statistical_Marital_Purchases[,input$products2]), 2, as.numeric)
xx<-barplot(apply(statistical_Marital_Purchases[,input$products2], 2, as.numeric)~statistical_Marital_Purchases$Marital_Status,
col="#69b3a2",xlab="Education levels",ylab = input$products2,
width=0.85, )
text(x = xx, y, label = y, pos = 3, cex = 1, col = "black", xpd=TRUE)
}
)
####-------------------------------------###
###Promotions
output$totalDeal <-renderText(
sum(data$NumDealsPurchases)
)
output$plotDeal <- renderPlot({
xx<- barplot(table(data$NumDealsPurchases),col=sample(color, length(table(data$NumDealsPurchases))) )
text(x = xx, y = table(data$NumDealsPurchases), label = table(data$NumDealsPurchases), pos = 3, cex = 1, col = "black", xpd=TRUE)
})
####Income
output$minIncome <- renderText(min(data$Income))
output$medianIncome <- renderText(mean(data$Income))
output$maxIncome <- renderText(max(data$Income))
output$boxplot_income <-renderPlot({
ggplot(data, aes(x=data[,input$normchoice_Income],y=Income,fill=data[,input$normchoice_Income]))+
ylim(0,180000)+geom_boxplot(outlier.colour="black", outlier.shape=16,outlier.size=2, notch=T)+xlab(input$normchoice_Income)+labs(fill = input$normchoice_Income)
})
output$density_income <-renderPlot(
qplot(round(Income), data = data, geom = "density",  color =data[,input$normchoice_Income],linetype = data[,input$normchoice_Income])
)
output$hist_income <-renderPlot(
qplot(Income, data = data, geom = "histogram", fill = data[,input$normchoice_Income])
+labs(fill = input$normchoice_Income)
)
####Anlysis
observeEvent(input$showhideSummary,{
toggle("summaryModelRegession")
}
)
observeEvent(input$showhideSummary2,{
toggle("summaryMultiLM")
}
)
#Linear Regession
output$summaryModelRegession <-renderPrint(
{
summary(lm(data$Total_Spent~data$Income))
}
)
output$plotLinearIncomeSpent <- renderPlot({
Sys.sleep(0.5) # system sleeping for 3 seconds for demo purpose
plot(data$Total_Spent~data$Income,xlab="Income",ylab="Total Spent")
abline(lm(data$Total_Spent~data$Income), col="red")
}
)
#Multiple Linear Regession
output$summaryMultiLM <- renderPrint({
Sys.sleep(0.5) # system sleeping for 3 seconds for demo purpose
summary(step(lm(Total_Spent~Income+accepted+NumDealsPurchases+Kidhome+Teenhome+Age,data=data)))
}
)
output$plotMultiLinearIncomeSpent <-renderPlot({
Sys.sleep(0.5) # system sleeping for 3 seconds for demo purpose
modelMulti<- step(lm(Total_Spent~Income+accepted+NumDealsPurchases+Kidhome+Teenhome+Age,data=data))
avPlots(modelMulti)
})
#Cluster
output$plotCluster <- renderPlot(
if(input$clusterchoice=="Cluster Plot"){
fviz_cluster(km.res, dfc, geom = "point",ellipse.type = "norm",repel = TRUE)
}else{
ggplot(dfc2, aes(x=cluster,y=dfc2[,input$clusterchoice],fill=cluster))+geom_boxplot(outlier.colour="black", outlier.shape=16,outlier.size=2, notch=T)+ylab(input$clusterchoice)
}
)
}
)
